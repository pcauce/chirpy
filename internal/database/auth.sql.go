// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getUserFromRefresh = `-- name: GetUserFromRefresh :one
SELECT user_id
FROM refresh_tokens
WHERE token = $1
  AND revoked_at IS NULL
  AND expires_at > NOW()
`

func (q *Queries) GetUserFromRefresh(ctx context.Context, token string) (uuid.NullUUID, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefresh, token)
	var user_id uuid.NullUUID
	err := row.Scan(&user_id)
	return user_id, err
}

const revokeRefresh = `-- name: RevokeRefresh :exec
UPDATE refresh_tokens
SET updated_at = $2, revoked_at = $2
WHERE token = $1
`

type RevokeRefreshParams struct {
	Token     string
	UpdatedAt time.Time
}

func (q *Queries) RevokeRefresh(ctx context.Context, arg RevokeRefreshParams) error {
	_, err := q.db.ExecContext(ctx, revokeRefresh, arg.Token, arg.UpdatedAt)
	return err
}

const storeRefresh = `-- name: StoreRefresh :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)
VALUES (
        $1,
        now(),
        now(),
        $2,
        $3
       )
`

type StoreRefreshParams struct {
	Token     string
	UserID    uuid.NullUUID
	ExpiresAt time.Time
}

func (q *Queries) StoreRefresh(ctx context.Context, arg StoreRefreshParams) error {
	_, err := q.db.ExecContext(ctx, storeRefresh, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}
